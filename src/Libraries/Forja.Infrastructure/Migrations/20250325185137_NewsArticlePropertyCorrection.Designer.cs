// <auto-generated />
using System;
using Forja.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Forja.Infrastructure.Migrations
{
    [DbContext(typeof(ForjaDbContext))]
    [Migration("20250325185137_NewsArticlePropertyCorrection")]
    partial class NewsArticlePropertyCorrection
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Forja.Domain.Entities.Analytics.AnalyticsAggregate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("AnalyticsAggregates", "analytics");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Analytics.AnalyticsEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AnalyticsEvents", "analytics");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Analytics.AnalyticsSession", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("AnalyticsSessions", "analytics");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Analytics.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<int>("EntityType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs", "analytics");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Common.LegalDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("bytea");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LegalDocuments", "common");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Common.NewsArticle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("bytea");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrioritized")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ProductId");

                    b.ToTable("NewsArticles", "common");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.Bundle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Bundles", "games");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.BundleProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BundleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BundleId");

                    b.HasIndex("ProductId");

                    b.ToTable("BundleProducts", "games");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.GameMechanic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MechanicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("MechanicId");

                    b.ToTable("GameMechanics", "games");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.GameTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("TagId");

                    b.ToTable("GameTags", "games");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Genres", "games");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.ItemImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImageAlt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ItemImages", "games");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.MatureContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("MatureContents", "games");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.Mechanic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Mechanics", "games");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AudioLanguages")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Developer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InterfaceLanguages")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MinimalAge")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Platforms")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubtitlesLanguages")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products", "games");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.ProductGenres", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductGenres", "games");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.ProductImages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemImageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ItemImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages", "games");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.ProductMatureContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MatureContentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MatureContentId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMatureContents", "games");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Tags", "games");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Store.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts", "store");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Store.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems", "store");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Store.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DiscountType")
                        .HasColumnType("integer");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Discounts", "store");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Store.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", "store");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Store.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("ExternalPaymentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRefunded")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("ProviderName")
                        .HasColumnType("integer");

                    b.Property<int>("ProviderResponse")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Payments", "store");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Store.ProductDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDiscounts", "store");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Support.FAQ", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FAQs", "support");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Support.SupportTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SupportTickets", "support");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Support.TicketMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSupportAgent")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SupportTicketId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("SupportTicketId");

                    b.ToTable("TicketMessages", "support");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Achievements", "user-profile");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.GameSave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SaveFileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserLibraryGameId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserLibraryGameId");

                    b.ToTable("GameSaves", "user-profile");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("PositiveRating")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", "user-profile");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Country")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomUrl")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("KeycloakUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<short>("ProfileHatVariant")
                        .HasColumnType("smallint");

                    b.Property<string>("SelfDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("ShowPersonalInfo")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("CustomUrl")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", "user-profile");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.UserAchievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AchievedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAchievements", "user-profile");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.UserFollower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowerId");

                    b.ToTable("UserFollowers", "user-profile");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.UserLibraryAddon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddonId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserLibraryGameId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddonId");

                    b.HasIndex("UserLibraryGameId");

                    b.ToTable("UserLibraryAddons", "user-profile");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.UserLibraryGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan?>("TimePlayed")
                        .HasColumnType("interval");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLibraryGames", "user-profile");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.UserWishList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("UserWishLists", "user-profile");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.Game", b =>
                {
                    b.HasBaseType("Forja.Domain.Entities.Games.Product");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("text");

                    b.Property<string>("SystemRequirements")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("TimePlayed")
                        .HasColumnType("interval");

                    b.ToTable("Games", "games");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.GameAddon", b =>
                {
                    b.HasBaseType("Forja.Domain.Entities.Games.Product");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("text");

                    b.HasIndex("GameId");

                    b.ToTable("GameAddons", "games");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Analytics.AnalyticsEvent", b =>
                {
                    b.HasOne("Forja.Domain.Entities.UserProfile.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Analytics.AnalyticsSession", b =>
                {
                    b.HasOne("Forja.Domain.Entities.UserProfile.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Analytics.AuditLog", b =>
                {
                    b.HasOne("Forja.Domain.Entities.UserProfile.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Common.NewsArticle", b =>
                {
                    b.HasOne("Forja.Domain.Entities.UserProfile.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Forja.Domain.Entities.Games.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Author");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.BundleProduct", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Games.Bundle", "Bundle")
                        .WithMany("BundleProducts")
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.Games.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bundle");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.GameMechanic", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Games.Game", "Game")
                        .WithMany("GameMechanics")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.Games.Mechanic", "Mechanic")
                        .WithMany("GameMechanics")
                        .HasForeignKey("MechanicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Mechanic");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.GameTag", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Games.Game", "Game")
                        .WithMany("GameTags")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.Games.Tag", "Tag")
                        .WithMany("GameTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.ProductGenres", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Games.Genre", "Genre")
                        .WithMany("ProductGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.Games.Product", "Product")
                        .WithMany("ProductGenres")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.ProductImages", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Games.ItemImage", "ItemImage")
                        .WithMany("ProductImages")
                        .HasForeignKey("ItemImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.Games.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemImage");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.ProductMatureContent", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Games.MatureContent", "MatureContent")
                        .WithMany("ProductMatureContents")
                        .HasForeignKey("MatureContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.Games.Product", "Product")
                        .WithMany("ProductMatureContents")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatureContent");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Store.Cart", b =>
                {
                    b.HasOne("Forja.Domain.Entities.UserProfile.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("Forja.Domain.Entities.Store.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Store.CartItem", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Store.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.Games.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Store.Discount", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Games.Product", null)
                        .WithMany("Discounts")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Store.Order", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Store.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.UserProfile.User", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Store.Payment", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Store.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Forja.Domain.Entities.Store.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.UserProfile.User", null)
                        .WithMany("Payments")
                        .HasForeignKey("UserId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Store.ProductDiscount", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Store.Discount", "Discount")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.Games.Product", "Product")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Support.SupportTicket", b =>
                {
                    b.HasOne("Forja.Domain.Entities.UserProfile.User", "User")
                        .WithMany("SupportTickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Support.TicketMessage", b =>
                {
                    b.HasOne("Forja.Domain.Entities.UserProfile.User", "Sender")
                        .WithMany("TicketMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.Support.SupportTicket", "SupportTicket")
                        .WithMany("Messages")
                        .HasForeignKey("SupportTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("SupportTicket");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.Achievement", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.GameSave", b =>
                {
                    b.HasOne("Forja.Domain.Entities.UserProfile.User", "User")
                        .WithMany("GameSaves")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.UserProfile.UserLibraryGame", "UserLibraryGame")
                        .WithMany("GameSaves")
                        .HasForeignKey("UserLibraryGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserLibraryGame");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.Review", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Games.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.UserProfile.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.UserAchievement", b =>
                {
                    b.HasOne("Forja.Domain.Entities.UserProfile.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.UserProfile.User", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.UserFollower", b =>
                {
                    b.HasOne("Forja.Domain.Entities.UserProfile.User", "Followed")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.UserProfile.User", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.UserLibraryAddon", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Games.GameAddon", "GameAddon")
                        .WithMany("UserLibraryAddons")
                        .HasForeignKey("AddonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.UserProfile.UserLibraryGame", "UserLibraryGame")
                        .WithMany("PurchasedAddons")
                        .HasForeignKey("UserLibraryGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameAddon");

                    b.Navigation("UserLibraryGame");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.UserLibraryGame", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Games.Game", "Game")
                        .WithMany("UserLibraryGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.UserProfile.User", "User")
                        .WithMany("UserLibraryGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.UserWishList", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Games.Product", "Product")
                        .WithMany("UserWishLists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.UserProfile.User", "User")
                        .WithMany("UserWishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.Game", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Games.Product", null)
                        .WithOne()
                        .HasForeignKey("Forja.Domain.Entities.Games.Game", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.GameAddon", b =>
                {
                    b.HasOne("Forja.Domain.Entities.Games.Game", "Game")
                        .WithMany("GameAddons")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forja.Domain.Entities.Games.Product", null)
                        .WithOne()
                        .HasForeignKey("Forja.Domain.Entities.Games.GameAddon", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.Bundle", b =>
                {
                    b.Navigation("BundleProducts");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.Genre", b =>
                {
                    b.Navigation("ProductGenres");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.ItemImage", b =>
                {
                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.MatureContent", b =>
                {
                    b.Navigation("ProductMatureContents");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.Mechanic", b =>
                {
                    b.Navigation("GameMechanics");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Discounts");

                    b.Navigation("ProductDiscounts");

                    b.Navigation("ProductGenres");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductMatureContents");

                    b.Navigation("Reviews");

                    b.Navigation("UserWishLists");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.Tag", b =>
                {
                    b.Navigation("GameTags");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Store.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Store.Discount", b =>
                {
                    b.Navigation("ProductDiscounts");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Store.Order", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Support.SupportTicket", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.Achievement", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Cart");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("GameSaves");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Reviews");

                    b.Navigation("SupportTickets");

                    b.Navigation("TicketMessages");

                    b.Navigation("UserAchievements");

                    b.Navigation("UserLibraryGames");

                    b.Navigation("UserWishLists");
                });

            modelBuilder.Entity("Forja.Domain.Entities.UserProfile.UserLibraryGame", b =>
                {
                    b.Navigation("GameSaves");

                    b.Navigation("PurchasedAddons");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.Game", b =>
                {
                    b.Navigation("GameAddons");

                    b.Navigation("GameMechanics");

                    b.Navigation("GameTags");

                    b.Navigation("UserLibraryGames");
                });

            modelBuilder.Entity("Forja.Domain.Entities.Games.GameAddon", b =>
                {
                    b.Navigation("UserLibraryAddons");
                });
#pragma warning restore 612, 618
        }
    }
}
